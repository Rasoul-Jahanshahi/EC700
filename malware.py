import subprocess
import re
import json
import time
import os

def check_similarity(tag1, tag2):
	similar = True
	if tag1 != None and tag2 != None:
		if tag1.sort() != tag2.sort():
			same = False
	elif tag1 == None and tag2 != None:
		same = False
	elif tag1 != None and tag2 == None:
		same = False
	return similar

def check_behavior(address_report1,address_report2):
    same = True
    analyzed = False
    while not analyzed:
	try:
            json_report1 = open(address_report1)
	    json_report2 = open(address_report2)
	    json_data1 = json.load(json_report1)
	    json_data2 = json.load(json_report2)
        except ValueError, e:
            continue
        analyzed = True
    behavior1 = json_data1.get('behavior')
    behavior2 = json_data2.get('behavior')
    if behavior1 == None and behavior2 == None:
            print "Behvaior report not found!!"
            return same
    elif behavior1 == None:
            same = False
            print "in regular cuckoo the malware didn't show any behavior"
            return same
    elif behavior2 == None:
            same = False
            print "in hardened cuckoo the malware didn't show any behavior"
            return same
    elif behavior1 != None and behavior2 != None:
            generic_behavior1 = behavior1.get('generic')
            generic_behavior2 = behavior2.get('generic')
            ##### comparing generic behavior
            if len(generic_behavior1) == len(generic_behavior2):
                    counter = 0
                    for num1 in range(len(generic_behavior1)):
                            for num2 in range(len(generic_behavior2)):
                                    if len(generic_behavior1[num1]['summary'].keys()) ==len(generic_behavior2[num2]['summary'].keys()):
                                            for key in generic_behavior1[num1]['summary'].keys():
                                                    if not check_similarity(generic_behavior1[num1]['summary'].get(key),generic_behavior1[num2]['summary'].get(key)):
                                                            counter += 1
                                                            break
                                    else:
                                            counter += 1
                                            continue
                    if counter == len(generic_behavior2):
                            ### the second run behvaior was not the same with any of the behvaiors in the first run
                            print "The difference is in generic behavior like registry delete/create, imported dlls, hosts or files created"
                            same = False
            else:
                    same = False
                    print "The length of behavior tags are not the same"
                    return same
            ### comparing process modules

	    if len(json_data1['behavior']['apistats'].keys()) == len(json_data2['behavior']['apistats'].keys()):
		for num in range(len(json_data1['behavior']['apistats'].keys())):
			pid1 = json_data1['behavior']['apistats'].keys()[num]
			pid2 = json_data2['behavior']['apistats'].keys()[num]
			if json_data1['behavior']['apistats'][str(pid1)].keys().sort() != json_data2['behavior']['apistats'][str(pid2)].keys().sort():
            # not check_similarity(json_data1['behavior']['processes'][0]['modules'], json_data2['behavior']['processes'][0]['modules']):
            #if not check_similarity(json_data1['behavior']['processes'][0]['modules'], json_data2['behavior']['processes'][0]['modules']):
                	    	same = False
                	    	print "The difference is in api called or processes that executed "
				return same

##### finding all the malwares n directory and then submit the analysis task

proc = subprocess.Popen('ls malwares/', stdout=subprocess.PIPE, shell=True)
tmp = proc.stdout.read()
names = tmp.split("\n")
num_malware = 0
diff = 0
sleep_time = 200
for name in names:
	if name is not '':
		print name
		address = 'malwares/' + name
		### regular cuckoo
		proc = subprocess.Popen('python ./cuckoo/utils/submit.py --platform windows --package exe --machine XP1  '+address, stdout=subprocess.PIPE, shell=True)
		tmp = proc.stdout.read()
		info =  tmp.split(" ")
		regular_cuckoo_ID = 0
		harden_cuckoo_ID = 0
		if "Success" in info[0]:
			print info[-1].strip("\n")
			print info[2]
			regular_cuckoo_ID = info[-1].strip("\n")
			match1 = re.search( r'Success: File (.+) added as task with ID (\d+)',tmp)
		else:
			print tmp
			exit()
		### harden cuckoo
		proc = subprocess.Popen('python ./cuckoo/utils/submit.py --platform windows --package exe --machine XP2  '+address, stdout=subprocess.PIPE, shell=True)
		tmp = proc.stdout.read()
		info =  tmp.split(" ")
		if "Success" in info[0]:
			print info[-1].strip("\n")
			print info[2]
			harden_cuckoo_ID = info[-1].strip("\n")
			match2 = re.search( r'Success: File (.+) added as task with ID (\d+)',tmp)
		else:
			print tmp
			exit()
		address_report1 = 'cuckoo/storage/analyses/' + regular_cuckoo_ID + '/reports/report.json'
		address_report2 = 'cuckoo/storage/analyses/' + harden_cuckoo_ID + '/reports/report.json'
		print address_report1
		print address_report2
		while( os.path.exists(address_report1) == False or os.path.exists(address_report2) == False):
		    continue

		if check_behavior(address_report1,address_report2) == True:
			print 'malware ' + name + ' acts the same'
		else:
			print 'malware ' + name + ' does NOT act the same in the hardened sandbox!!!!'
                        diff += 1
print 'Finished analyzing malwares'
print str(diff) + "/" + str(len(names)) + " behave differently!"
